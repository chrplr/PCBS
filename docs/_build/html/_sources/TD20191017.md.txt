# TD 17/10/2019

## 1. Python basics

### 1.1 (if not already done)
- prints 1000 times the lines: `All work and no play makes Jack a dull boy.`

- Given a list of numbers, print their product

- Given a list of numbers, print the sum of their square

- Given a list of numbers, print the largest one.

- Given a list of numbers, print the second largest one.


References:

   -  Python Lists <https://www.w3schools.com/python/python_lists.asp>
   -  List comprehensions <https://www.pythonforbeginners.com/basics/list-comprehensions-in-python>
   -   https://automatetheboringstuff.com/chapter4/

### 1.2: Unique

Given a list of words, print how many different words are in that list (hint: use a dictionary or a set)

References:
* Python sets: https://www.w3schools.com/python/python_sets.asp

### 1.3: word count

Given a list of words, count the number of times each word appears in
the list. Eg. ``[Jim, Alan, Jim, Joe]`` -> ``Jim:2, Alan:1, Joe:1``
(hint: use a dictionary)

Reference:
* Python dictionaries: https://www.w3schools.com/python/python_dictionaries.asp

## 2. File reading
### 2.1 Read a file
Try to run the following script to read a file:
```py
# First, open a so-called "file object"
file = open('text.txt')
# The read() function by defaults returns all the content of the file
text = file.read()
print(text)
# Don't forget to close the file!
file.close()
```

Here is a more standard syntax, using the `with` keyword:
```py
with open('text.txt') as file:
    text = file.read()
    print(text)
```
With the `with` keyword, the file object is automatically disposed of (ie. closed) at the end of the block.

### 2.2: head
Read the documentation of the functions `readline()` and `readlines()`. Use them to write a program that prints the first 10 lines a file (or the whole file if it is less than 10 lines long)

Bonus for this and all scripts in this section: your program should take the input file as a command line argument.

### 2.3: tail
Write a script that prints the last 10 lines of a file (or the whole
file is it is less than 10 lines long).

### 2.4: number parsing
The file `numbers.txt` contains one number on each line. Write a program that prints the sum of all those numbers.

Tip: A hacky way to go through all the lines in a file is to use the iterable behavior embedded in the file object. One can simply iterate through the lines of a file with:
```py
for line in file:
    # Do something with line
```

### 2.5: line numbers
Write a program that opens a file and prints the content of the file with lines numbered starting at 1, and line numbers separated from the actual line by a space. For example if you feed it the file containing:
```
Un vieil étang
Une grenouille saute
Le bruit de l'eau

Basho
```

You should print:
```
1 Un vieil étang
2 Une grenouille saute
3 Le bruit de l'eau
4 
5 Basho
```

### 2.6: word count
Write a program that counts the number of words in a file.

Reference: look at the documentation of the `split()` function https://docs.python.org/3.7/library/stdtypes.html#str.split

### 2.7: string finder
Write a script that opens and read a text file, and print all the lignes that contain a given target word,  say, ``cogmaster``.

Reference: http://automatetheboringstuff.com/chapter8/

## 3. File writing

### 3.1 Tuto
To write to a file, one has to first open the file in write mode, by providing a second argument to the `open` function, and then use the function `write`:
```py
with open('test.txt', 'w') as file:
    file.write('Hello world!')
```

### 3.2 Opening modes
Read the documentation of the `open()` function and learn about the different modes. Try to read in a file in write mode. What happens? Write a program that every time it is called appends one line containing

### 3.3
Modify the Pascal triangle code so that it writes its output to a file `pascal.txt`.

Hacky solution: the terminal has a process that can redirect the output of any program to a file, using the symbol  `>` like this:
```bash
pascal.py > pascal.txt
```
Similarly an input can be fed to a program from a file. This system is called pipes and is very useful. You can learn more about them [here](https://ryanstutorials.net/linuxtutorial/piping.php)

## 4. git/github: setting up a first repository
### What you should know
`git` is a software that manages so-called *repositories*. These repositories are special directories with additional functionalities:
* They contain a full history of the modifications made. One can for example go back in time to an earlier version of the project.
* They offer synchronization services between different computers/different members of a team. 

This synchronization capacity needs to go via a webservice. The website github.com provides such a service for the `git` program. 

Note that although related, git and github.com are 2 separated entities: git is an open-source software that can be downloaded at https://git-scm.com/. github is a for-profit website, that offers every user the possibility to host for free public repositories (that everyone can see). Lots of alternatives to github exist, like gitlab.com.

Also note that if you are a student you can apply for the github education pack that gives you the possibility to host private repositories (only invited members can see them), look [here](https://education.github.com/pack)

### Creating a first repo on github
Follow the tutorial on https://pages.github.com/. You should create a repository, clone it, and be able to commit and push

### Add code to your repo
Read https://en.wikipedia.org/wiki/Fahrenheit and write a script that converts
temperature from one scale to the other. Add it to your new repository

## 5. Advanced exercises (for the bored)
### 5.1 Taxis
Two taxi companies propose differents pricing schemes:

 * Company A charges 4.80€ plus 1.15€ by km travelled.

 * Company B charges 3.20€ plus ##20€ by km travelled.

Write a script that finds which company is the cheapest as a function of the distance to travel.

### 5.2 Kaprekar numbers
A Kaprekar number is a number whose decimal representation of the square can be decomposed in a left and a right part (both nonzero) such that the sum of the two parts equals the initial number. For example:

- 703 is a Kaprekar number in base 10 because 703² = 494 209 and 494 + 209 = 703
- 4879 is a Kaprekar number in base 10 because 4879² = 23 804 641 and 238 + 04641 = 4879

Write a program that returns all Kaprekar numbers between 1 and N.

### 5.3 RPN calculator
Write a reverse Polish arithmetic expression evaluator (See
https://en.wikipedia.org/wiki/Reverse_Polish_notation).

E.g. ``3 4 * 5 -`` evaluate to ``7``.

### 5.4 RodRego simulator
(only for very motivated people)
Write a program that simulates a RodRego machine with 10 registers (http://sites.tufts.edu/rodrego/). The program is stored in a string or in a file that is read, then executed. The program must contain a function that, given the 10 initial values of the registers and the program returns the new register values after the END instruction is reached.

